/**
 * Created by Phan Trung NguyÃªn.
 * User: nguyenpl117
 * Date: 6/4/2020
 * Time: 4:06 PM
 */

import {ApolloServerTestClient} from "apollo-server-testing/dist/createTestClient";
import {createTestClient} from "apollo-server-testing";
import {authContext, createServer, resetTables, seedDB} from "../helpers";
const { gql } = require('apollo-server');
import {expect} from "chai";
import {Factory} from "@tngraphql/illuminate/dist/Support/Facades";
import {UserModel} from "../../src/app/UserModel";
import ${model} from "../../src/app/Models/${model}";
import {${queryName.toUpperCase()}_LIST_QUERY, ${queryName.toUpperCase()}_QUERY} from "./queries/role-query";
import {SortEnumType} from "../../src/app/GraphQL/Types/SortEnumType";

describe('${name} Http', () => {
    let client: ApolloServerTestClient;

    before(async () => {
        const server: any = await createServer();
        client = createTestClient(server);
    });

    beforeEach(async () => {
        await seedDB();
    });

    afterEach(async () => {
        await resetTables();
        authContext(null);
    });

    describe('${name} Http | Index', () => {
        describe('${name} Http | index | base', () => {
            it('should response first ${name}', async () => {
                const ${queryName} = await ${model}.first();

                const res = await client.query({
                    query: ${queryName.toUpperCase()}_QUERY
                });

                expect(res.errors).to.undefined;
                expect(res.data.${queryName}.id).to.eq(${queryName}.id);
            });

            it('should response first ${name} using order by', async () => {
                const ${queryName} = await Factory.model('App/Models/${model}').create();

                const res = await client.query({
                    query: ${queryName.toUpperCase()}_QUERY,
                    variables: {
                        "sortBy": {
                            "id": "DESC"
                        }
                    }
                });

                expect(res.errors).to.undefined;
                expect(res.data.${queryName}.id).to.eq(${queryName}.id);
            });

            it('should response first ${name} when authentication', async () => {
                const ${queryName} = await ${model}.first();

                authContext(await UserModel.first());

                const res = await client.query({
                    query: ${queryName.toUpperCase()}_QUERY
                });

                expect(res.errors).to.undefined;
                expect(res.data.${queryName}.id).to.eq(${queryName}.id);
            });
        });

        describe('User Http | index | filter', () => {
        <% _.forEach(attributes, function(attribute) { %>
            it('should filter ${attribute} without error', async () => {
                const ${queryName} = await Factory.model('App/Models/${model}').create();

                const res = await client.query({
                    query: ${queryName.toUpperCase()}_QUERY,
                    variables: {
                        "filter": {
                            "field": "${attribute}",
                            "value": ${queryName}.${attribute},
                            "operator": "eq"
                        }
                    }
                });
                expect(res.errors).to.undefined;
                expect(res.data.${queryName}.id).to.eq(${queryName}.id);
                expect(res.data.${queryName}.${attribute}).to.eq(${queryName}.${attribute});
            })
        <% }); %>
        });

        describe('User Http | index | sortBy', () => {
        <% _.forEach(attributes, function(attribute) { %>
            it('should sort by desc ${attribute} without error', async () => {
                await Factory.model('App/Models/${model}').createMany(3);

                const ${queryName} = await ${model}.query().orderBy('${attribute}', SortEnumType.DESC).first();

                const res = await client.query({
                    query: ${queryName.toUpperCase()}_QUERY,
                    variables: {
                        "sortBy": [{
                            "${attribute}": SortEnumType.DESC
                        }]
                    }
                });

                expect(res.errors).to.undefined;
                expect(res.data.${queryName}.id).to.eq(${queryName}.id);
                expect(res.data.${queryName}.${attribute}).to.eq(${queryName}.${attribute});
            })

            it('should sort by asc ${attribute} without error', async () => {
                await Factory.model('App/Models/${model}').createMany(3);

                const ${queryName} = await ${model}.query().orderBy('${attribute}', SortEnumType.ASC).first();

                const res = await client.query({
                    query: ${queryName.toUpperCase()}_QUERY,
                    variables: {
                        "sortBy": [{
                            "${attribute}": SortEnumType.ASC
                        }]
                    }
                });

                expect(res.errors).to.undefined;
                expect(res.data.${queryName}.id).to.eq(${queryName}.id);
                expect(res.data.${queryName}.${attribute}).to.eq(${queryName}.${attribute});
            })
        <% }); %>
        });
    });

    describe('${name} Http | list', () => {
        beforeEach(async () => {
            authContext(await UserModel.first());
        });

        describe('${name} Http | list | base', () => {
            it('should response error when is not login', async () => {
                authContext(null);
                const res = await client.query({
                    query: ${queryName.toUpperCase()}_LIST_QUERY
                });
                expect(res.errors).to.not.undefined;
                expect(res.errors[0]['code']).to.eq('E_AUTHENTICATION');
            });

            it('should reponse list ${queryName}', async () => {
                await Factory.model('App/Models/${model}').createMany(5);
                const ${queryName}s = await ${model}.query();

                const res = await client.query({
                    query: ${queryName.toUpperCase()}_LIST_QUERY
                });

                expect(res.errors).to.undefined;
                expect(res.data.${queryName}s.data).to.length(${queryName}s.length);
                expect(res.data.${queryName}s.total).to.eq(${queryName}s.length);
                expect(res.data.${queryName}s.currentPage).to.eq(1);
            });

            it('should response ${name} paginate', async () => {
                await Factory.model('App/Models/${model}').createMany(5);
                const ${queryName}s = await ${model}.query();

                const res = await client.query({
                    query: ${queryName.toUpperCase()}_LIST_QUERY,
                    variables: {
                        page: 2,
                        limit: 2
                    }
                });

                expect(res.errors).to.undefined;
                expect(res.data.${queryName}s.data).to.length(2)
                expect(res.data.${queryName}s.perPage).to.eq(2)
                expect(res.data.${queryName}s.total).to.eq(${queryName}s.length)
                expect(res.data.${queryName}s.currentPage).to.eq(2)
            });
        });

        describe('${name} Http | list | filter', () => {
        <% _.forEach(attributes, function(attribute) { %>
            it('should filter ${attribute} without error', async () => {
                const ${queryName} = await Factory.model('App/Models/${model}').create();

                const res = await client.query({
                    query: ${queryName.toUpperCase()}_LIST_QUERY,
                    variables: {
                        "filter": {
                            "field": "${attribute}",
                            "value": ${queryName}.${attribute},
                            "operator": "eq"
                        }
                    }
                });
                expect(res.errors).to.undefined;
                expect(res.data.${queryName}s.data[0].id).to.eq(${queryName}.id)
                expect(res.data.${queryName}s.data[0].${attribute}).to.eq(${queryName}.${attribute})
            });
        <% }); %>
        });

        describe('${name} Http | list | sortBy', () => {
        <% _.forEach(attributes, function(attribute) { %>
            it('should order by ${attribute} desc when sortBy as array', async () => {
                await Factory.model('App/Models/${model}').createMany(5);

                const data = await ${model}.query().orderBy('${attribute}', SortEnumType.DESC)

                const res = await client.query({
                    query: ${queryName.toUpperCase()}_LIST_QUERY,
                    variables: {
                        "sortBy": [{
                            "${attribute}": SortEnumType.DESC
                        }]
                    }
                });

                expect(res.errors).to.undefined;
                expect(res.data.${name}s.data.map(x=>x.id)).to.deep.eq(data.map(x => x.id));
            });

            it('should order by ${attribute} asc when sortBy as array', async () => {
                await Factory.model('App/Models/${model}').createMany(5);

                const data = await ${model}.query().orderBy('${attribute}', SortEnumType.ASC)

                const res = await client.query({
                    query: ${queryName.toUpperCase()}_LIST_QUERY,
                    variables: {
                        "sortBy": [{
                            "${attribute}": SortEnumType.ASC
                        }]
                    }
                });

                expect(res.errors).to.undefined;
                expect(res.data.${name}s.data.map(x=>x.id)).to.deep.eq(data.map(x => x.id));
            });
        <% }); %>
        });
    });

    describe('${name} Http | create', () => {

    });

    describe('${name} Http | update', () => {

    });

    describe('${name} Http | delete', () => {

    });

});